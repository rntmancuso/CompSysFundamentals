Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.8/dist-packages/nbclient/client.py", line 1304, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.8/dist-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.8/dist-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.8/dist-packages/nbclient/client.py", line 1020, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.8/dist-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
display(Markdown(htmlFig("../images/gdbsurgery/gdbsurgery.002.png",id="fig:surgery", width="80%",
                         caption="Figure: Using a debugger to conduct open Process Surgery.  This figure illustrates the analogy between using a debugger like gdb to explore and mainiputate a process in a way that is similar to conducting a robotic surgery on a human patient. The patient is a running process, the robotic surgery tool is a gdb process attached to the target process, and finally the terminal we are running gdb is our inteface where we use the facilities of gdb to explore and mainipulate the target process.")))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[2], line 1[0m
[0;32m----> 1[0m display(Markdown([43mhtmlFig[49m([38;5;124m"[39m[38;5;124m../images/gdbsurgery/gdbsurgery.002.png[39m[38;5;124m"[39m,[38;5;28mid[39m[38;5;241m=[39m[38;5;124m"[39m[38;5;124mfig:surgery[39m[38;5;124m"[39m, width[38;5;241m=[39m[38;5;124m"[39m[38;5;124m80[39m[38;5;124m%[39m[38;5;124m"[39m,
[1;32m      2[0m                          caption[38;5;241m=[39m[38;5;124m"[39m[38;5;124mFigure: Using a debugger to conduct open Process Surgery.  This figure illustrates the analogy between using a debugger like gdb to explore and mainiputate a process in a way that is similar to conducting a robotic surgery on a human patient. The patient is a running process, the robotic surgery tool is a gdb process attached to the target process, and finally the terminal we are running gdb is our inteface where we use the facilities of gdb to explore and mainipulate the target process.[39m[38;5;124m"[39m)))

[0;31mNameError[0m: name 'htmlFig' is not defined
NameError: name 'htmlFig' is not defined

